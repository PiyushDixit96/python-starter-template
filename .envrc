# NOTE: configuration for all development environment (no secrets!) should go here

# ensures hard-to-find errors bubble up and fail the entire script
# https://direnv.net/man/direnv-stdlib.1.html#codestrictenv-ltcommandgt-code
strict_env

# if a developer does *not* want to use direnv, zsh, etc and stick with a non-standard setup
# then they can just set DIRENV_DISABLE=1 and manage their own environment locally
if [ "${DIRENV_DISABLE:-}" = 1 ]; then
  exit 0
fi

# https://github.com/direnv/direnv/pull/1352/files
# https://github.com/direnv/direnv/pull/1329
# https://github.com/direnv/direnv/wiki/Python#uv
layout_uv() {
  if [[ -d ".venv" ]]; then
    VIRTUAL_ENV="$(pwd)/.venv"
  fi

  if [[ -z ${VIRTUAL_ENV:-} || ! -d ${VIRTUAL_ENV:-} ]]; then
    log_status "No virtual environment exists. Executing \`uv venv\` to create one."
    uv venv
    VIRTUAL_ENV="$(pwd)/.venv"
  fi

  PATH_add "$VIRTUAL_ENV/bin"

  export UV_ACTIVE=1
  export VENV_ACTIVE=1
  export VIRTUAL_ENV
}

layout uv

# `inject` is much faster than individually sourcing keys with `op read`
# this function assumes `set -e` enables so if `op inject` fails, the script will exit
# why not just source the output of `op inject` directly? Without this wrapper failures
# in `op inject` will not bubble up and fail the script, which is what we want for easy CI debugging.
op_inject_source() {
  local tmpfile
  tmpfile=$(mktemp)

  op inject > "$tmpfile"

  source "$tmpfile"
  rm -f "$tmpfile"
}

# this is hack to allow us to render a specific .env file
# https://github.com/direnv/direnv/issues/1364
if [ -n "${RENDER_DIRENV:-}" ]; then
  for env_file in $RENDER_DIRENV; do
    source_env "$env_file"
  done
  exit 0
fi

# .env should always exist, not contain secrets, and apply to all environments
source_env ".env"

# secrets or configuration to control `.env.shared` logic (such as a database connection hosts)
source_env_if_exists ".env.local"

# environment that only applies to local development (testing and development)
source_env ".env.shared"
source_env_if_exists ".env.shared.local"

# CI=true instructs direnv to load all test-specific environment variables
if [ -n "${CI:-}" ]; then
  source_env ".env.test"
  source_env_if_exists ".env.test.local"
else
  # unique setup for your local machine, allow overrides of common configuration, contain development secrets
  source_env ".env.dev"
  source_env_if_exists ".env.dev.local"
fi

# direnv does not have an easy way to source a .env.test file when in test mode. We could do this through pytest, etc
# This is harder than two different TEST_ variants for connection strings.
export TEST_REDIS_URL=${REDIS_URL/\/1/\/2}
export TEST_DATABASE_NAME=test
export TEST_DATABASE_URL=${DATABASE_URL/\/development/\/${TEST_DATABASE_NAME}}

env_vars_required PYTHON_ENV REDIS_URL DATABASE_URL SMTP_URL
